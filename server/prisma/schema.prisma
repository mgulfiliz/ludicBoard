generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model User {
  userId            Int              @id @default(autoincrement())
  username          String           @unique
  email             String           @unique
  password          String
  name              String?
  profilePictureUrl String?
  googleId          String?          @unique
  githubId          String?          @unique
  teamId            Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  attachments       Attachment[]
  comments          Comment[]
  assignedTasks     Task[]           @relation("TaskAssignee")
  authoredTasks     Task[]           @relation("TaskAuthor")
  taskAssignments   TaskAssignment[]
  team              Team?            @relation(fields: [teamId], references: [id])
  projectMemberships ProjectMembership[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  startDate        DateTime?
  endDate          DateTime?
  projectTeams     ProjectTeam[]
  tasks            Task[]
  memberships      ProjectMembership[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  status           String
  priority         String?
  points           Int?
  startDate        DateTime?
  dueDate          DateTime?
  tags             String[]
  projectId        Int
  project          Project           @relation(fields: [projectId], references: [id])
  
  authorUserId     Int
  author           User              @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  
  assignedUserId   Int?
  assignee         User?             @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  
  comments         Comment[]
  attachments      Attachment[]
  taskAssignments  TaskAssignment[]
}

model ProjectMembership {
  id        Int         @id @default(autoincrement())
  projectId Int
  userId    Int
  role      ProjectRole @default(VIEWER)
  project   Project     @relation(fields: [projectId], references: [id])
  user      User        @relation(fields: [userId], references: [userId])

  @@unique([projectId, userId])
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [userId])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  task         Task    @relation(fields: [taskId], references: [id])
  uploadedBy   User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [userId])
}